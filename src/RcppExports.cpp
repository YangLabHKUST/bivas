// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// outerloop_thread
RcppExport SEXP outerloop_thread(arma::mat& X, arma::vec& y, arma::mat& Z, const arma::vec& group, const arma::vec& glevel, const arma::vec& logodds, arma::vec sb2, arma::vec se2, arma::vec alpha, arma::mat mu, arma::mat alpha_jk, arma::mat pi_k, arma::uword maxIter, double tol, int verbose, const int coreNum);
RcppExport SEXP _bivas_outerloop_thread(SEXP XSEXP, SEXP ySEXP, SEXP ZSEXP, SEXP groupSEXP, SEXP glevelSEXP, SEXP logoddsSEXP, SEXP sb2SEXP, SEXP se2SEXP, SEXP alphaSEXP, SEXP muSEXP, SEXP alpha_jkSEXP, SEXP pi_kSEXP, SEXP maxIterSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group(groupSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type glevel(glevelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sb2(sb2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha_jk(alpha_jkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pi_k(pi_kSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(outerloop_thread(X, y, Z, group, glevel, logodds, sb2, se2, alpha, mu, alpha_jk, pi_k, maxIter, tol, verbose, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// outerloop_mt_thread
RcppExport SEXP outerloop_mt_thread(Rcpp::List& Xs, Rcpp::List& ys, Rcpp::List& Zs, const arma::vec& logodds, arma::mat sb2, arma::mat se2, arma::vec alpha, arma::cube mu, arma::cube alpha_jk, arma::mat pi_k, arma::vec nn, arma::uword K, arma::uword q, arma::uword maxIter, double tol, int verbose, const int coreNum);
RcppExport SEXP _bivas_outerloop_mt_thread(SEXP XsSEXP, SEXP ysSEXP, SEXP ZsSEXP, SEXP logoddsSEXP, SEXP sb2SEXP, SEXP se2SEXP, SEXP alphaSEXP, SEXP muSEXP, SEXP alpha_jkSEXP, SEXP pi_kSEXP, SEXP nnSEXP, SEXP KSEXP, SEXP qSEXP, SEXP maxIterSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type Xs(XsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type Zs(ZsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type logodds(logoddsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sb2(sb2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type se2(se2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type alpha_jk(alpha_jkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pi_k(pi_kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(outerloop_mt_thread(Xs, ys, Zs, logodds, sb2, se2, alpha, mu, alpha_jk, pi_k, nn, K, q, maxIter, tol, verbose, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// tt
RcppExport SEXP tt(arma::vec s1, arma::vec s2, arma::mat xtx);
RcppExport SEXP _bivas_tt(SEXP s1SEXP, SEXP s2SEXP, SEXP xtxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xtx(xtxSEXP);
    rcpp_result_gen = Rcpp::wrap(tt(s1, s2, xtx));
    return rcpp_result_gen;
END_RCPP
}
// read_data
RcppExport SEXP read_data(Rcpp::String stringname);
RcppExport SEXP _bivas_read_data(SEXP stringnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type stringname(stringnameSEXP);
    rcpp_result_gen = Rcpp::wrap(read_data(stringname));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bivas_outerloop_thread", (DL_FUNC) &_bivas_outerloop_thread, 16},
    {"_bivas_outerloop_mt_thread", (DL_FUNC) &_bivas_outerloop_mt_thread, 17},
    {"_bivas_tt", (DL_FUNC) &_bivas_tt, 3},
    {"_bivas_read_data", (DL_FUNC) &_bivas_read_data, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bivas(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
